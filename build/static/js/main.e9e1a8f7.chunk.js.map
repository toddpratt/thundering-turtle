{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Banner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bannerText","data","city","name","console","log","react_default","a","createElement","Jumbotron","className","Component","BaseChart","_this2","_this3","list","forEach","val","key","dt_txt","value","getValue","push","TemperatureChart","react_chartkick_esm","getData","height","min","suffix","main","temp","HumidityChart","humidity","WindSpeedChart","wind","speed","App","_this4","updateForecast","bind","assertThisInitialized","_this5","fetch","then","res","json","setState","status","forecast","setInterval","App_Banner","App_TemperatureChart","App_HumidityChart","App_WindSpeedChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9e1a8f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Container, Jumbotron } from 'reactstrap';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactChartkick, { LineChart } from 'react-chartkick'\nimport Chart from 'chart.js'\n\n\nclass Banner extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        var bannerText = \"Weather: New York...\";\n\n        if (this.props.data) {\n            bannerText = \"Weather: \" + this.props.data.city.name;\n        };\n\n        console.log(this.props);\n        return (\n            <Jumbotron className=\"page-header panel panel-default\">\n                <h2>{bannerText}</h2>\n            </Jumbotron>\n        );\n    }\n}\n\nclass BaseChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    getData() {\n        if (!this.props.data) return null;\n\n        const data = [];\n        const temps = this.props.data.list;\n        temps.forEach(val => {\n            const key = val.dt_txt;\n            const value = this.getValue(val);\n            data.push([key, value])\n        });\n\n        return data;\n    }\n\n}\n\nclass TemperatureChart extends BaseChart {\n    render() {\n        return (\n            <div className=\"panel panel-default chart-container\">\n                <div className=\"panel-heading\"><h3>Temperature</h3></div>\n                <div className=\"panel-body\">\n                    <LineChart data={this.getData()}\n                        height=\"600px\" min={null} suffix=\"&#x2109;\" />\n                </div>\n            </div>\n        );\n    }\n\n    getValue(val) {\n        return val.main.temp;\n    }\n}\n\nclass HumidityChart extends BaseChart {\n    render() {\n        return (\n            <div className=\"panel panel-default chart-container\">\n                <div className=\"panel-heading\"><h3>Humidity</h3></div>\n                <div className=\"panel-body\">\n                    <LineChart data={this.getData()}\n                        height=\"600px\" min={null} suffix=\"%\" />\n                </div>\n            </div>\n        );\n    }\n\n    getValue(val) {\n        return val.main.humidity;\n    }\n}\n\nclass WindSpeedChart extends BaseChart {\n    render() {\n        return (\n            <div className=\"panel panel-default chart-container\">\n                <div className=\"panel-heading\"><h3>Wind Speed</h3></div>\n                <div className=\"panel-body\">\n                    <LineChart data={this.getData()}\n                        height=\"600px\" min={null} suffix=\"MPH\" />\n                </div>\n            </div>\n        );\n    }\n\n    getValue(val) {\n        return val.wind.speed;\n    }\n}\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.updateForecast = this.updateForecast.bind(this);\n    }\n\n    updateForecast() {\n        fetch(\"https://thundering-turtle.glitch.me/forecast?city=New+York,ny,us\")\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    status: json.status,\n                    forecast: json.data\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.updateForecast();\n        setInterval(this.updateForecast, 300000)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Banner data={this.state.forecast} />\n                <TemperatureChart data={this.state.forecast} />\n                <HumidityChart data={this.state.forecast} />\n                <WindSpeedChart data={this.state.forecast} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}